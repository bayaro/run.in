#!/bin/bash

# -----=== FUNCTIONS ==========================================================
verbose() {
    local color='1;33'
    if echo "$1" | grep -q '^[01];[0-9]*$'; then
        color=$1
        shift
    fi
    if [ -e "$1" ]; then
        TO="$1"
        shift
    else
        TO=/dev/stderr
    fi
    echo -e "\e[${color}m$VERBOSE_PREFIX $@\e[0;0m" >> "$TO"
}

err() {
    verbose '1;31' "ERROR: $@"
    exit 1
}

ask() {
    local opt=
    if [ "$1" = 'noecho' ]; then
        opt='-s'
        shift
    fi
    local esc=$(printf '\033')
    white="${esc}[1;37m"
    printf "${white}===> $@${esc}[0m "
    res=
    read $opt res
    if [ -n "$opt" ]; then
        echo
    fi
}

load_config() {
    local conf=$(dirname $(realpath "$0"))/run.in.cfg
    if [ -e "$conf" ]; then
        verbose "Loading $conf ..."
        source "$conf"
    fi
    while [ -n "$1" ]; do
        conf=${conf}.${1}
        shift
        if [ -e "$conf" ]; then
            verbose "Loading $conf ..."
            source "$conf"
        fi
    done
    SSH_PORT=${SSH_PORT:-"909"}
    PROXY_PORT=${PROXY_PORT:-"$SSH_PORT"}
    if [ -z "$PROXY_HOST" ]; then
        PROXY_USE_BY_DEFAULT=0
    fi
}

get_item_from_list() {
    echo "$list" | awk '{print NR") "$0}'
    size=$(expr `echo "$list" | wc -l` + 0)
    if [ $size -eq 0 ]; then
        alert "ERROR: Could not extract list from mirrros list"
        exit 1
    fi
    if [ $size -eq 1 ]; then
        item=$(echo "$list" | sed -n 1p)
        return
    fi

    local num= suggest_num=
    if [ -n "$1" ]; then
        suggest_num=`echo "$list" | grep -n "$1" | head -n 1 | cut -f1 -d:`
    fi
    if [ -z "$suggest_num" ]; then suggest_num=1 ; fi
    while true; do
        ask "Enter the number from list ($suggest_num): "
        num=$res
        if [ -z "$num" ]; then num=$suggest_num; fi

        set +e
        echo "$num" | grep -q '^[0-9][0-9]*$'
        res=$?
        set -e
        if [ $res -ne 0 ]; then continue; fi
        if [ $num -gt $size ]; then continue; fi
        break
    done
    item=$(echo "$list" | sed -n ${num}p)
}

# -----=== CODE ===============================================================
ME=`basename $0`
HOSTS_LIST_CACHE="/tmp/$ME.cache"
VERBOSE_PREFIX='===>'

USE_HOSTS_LIST_CACHE=1
RUN_IN_PARALLEL=0
SHOW_SUMMARY=0
SSH=0
PROXY_USE_BY_DEFAULT=0
while true; do
    case "$1" in
        -y) YES=1
            ;;
        -d) DEBUG=1
            ;;
        -g) PATTERN=$2
            shift
            ;;
        -w) PATTERN='\b'$2'\b'
            shift
            ;;
        -s) SSH=1
            ;;
        -j) SSH=1 JUST_SHOW_SSH=1
            ;;
        -ss|-sum) SHOW_SUMMARY=1 YES=1
            ;;
        -nc|-nocache) USE_HOSTS_LIST_CACHE=0
            ;;
        -p|-par) RUN_IN_PARALLEL=1 YES=1
            ;;
        -ps) RUN_IN_PARALLEL=1 YES=1 SHOW_SUMMARY=1
            ;;
        *) break
            ;;
    esac
    shift
done

if [ $SSH -eq 1 ] && ( [ $RUN_IN_PARALLEL -eq 1 ] || [ $SHOW_SUMMARY -eq 1 ] ); then
    err "Could not ssh with RUN_IN_PARALLEL or SHOW_SUMMARY!!!!"
fi

PROFILE=`echo "$ME" | sed -E 's/run.in.((.*).sh*)*$/\2/'`
if [ -z "$PROFILE" ]; then
    PROFILE=default
fi

verbose "Using profile '$PROFILE'"
load_config $PROFILE
CONNECT_TIMEOUT=${CONNECT_TIMEOUT:-2}

verbose "Load cloud specific code ..."
. $(dirname $(realpath "$0"))/clouds/${CLOUD_TYPE}.sh

if [ ! -e "$HOSTS_LIST_CACHE" ] || [ $USE_HOSTS_LIST_CACHE -ne 1 ]; then
    verbose "Loading host list"
    get_raw_hosts_list
else
    verbose "Cached host list is using: [details: $(ls -l "$HOSTS_LIST_CACHE")]"
    HOSTS=`cat "$HOSTS_LIST_CACHE"`
fi
if [ $? -ne 0 ]; then
    err
fi
echo "$HOSTS" > "$HOSTS_LIST_CACHE"

HOSTS=$(echo "$HOSTS" | jq -rc 'to_entries | .[] | @sh "[\(.key)]=\(.value | tostring)"')
if [ -z "$HOSTS" ]; then
    err "The raw hosts list is empty"
fi
eval "declare -A HOSTS=($HOSTS)"

HOSTS=$(
for host in "${HOSTS[@]}"; do
    parse_host_from_raw_list "$host"
done)

if [ -n "$PATTERN" ]; then
    if echo "$PATTERN" | grep -q -E '^([0-9]{1,3}\.){3}[0-9]{1,3}$' ; then
        PATTERN="\b${PATTERN}\b"
    fi
    HOSTS=$(echo "$HOSTS" | grep -E "$PATTERN")
    if [ -z "$HOSTS" ]; then
        PATTERN=$(printf "$PATTERN" | tr -d "\b")
        err "There are no hosts that contains \e[1;31m$PATTERN\e[1;33m in its description"
    fi
fi

HOSTS=$(echo "$HOSTS" | sort -g)

if [ $SSH -eq 1 ]; then
    REMOTE_CMD=ssh # just to inform on beggining
else
    REMOTE_CMD="$@"
fi

if [ -z "$REMOTE_CMD" ]; then
    USE_HOSTS_LIST_CACHE=0;
else
    verbose ">>>>>> $REMOTE_CMD"
    if [ ! -e "$REMOTE_CMD" ]; then
        echo "$REMOTE_CMD" > /tmp/remote_cmd
        REMOTE_CMD=/tmp/remote_cmd
    fi
fi

if [ -z "$REMOTE_CMD" ]; then
    list=$(echo "$HOSTS" \
        | awk -F '##' '{printf "===> %-14s %20s %s: %s (%s %s) %s ::%s\n",$3,$6,$1,$2,$4,$5,$7,$8}' | grep --color=always -E "$PATTERN|$")
    echo "$list"
    verbose "`echo "$list" | wc -l` hosts found"
    exit 0
fi

res=$(ssh-add -q 2>&1)
if [ $? -ne 0 ]; then
    verbose $res
    verbose "Please run: eval \$(ssh-agent | grep ^SSH)"
fi

HOSTS=`echo "$HOSTS" | grep -v '##windows##'`

if [ $SSH -eq 1 ]; then
    list=$(echo "$HOSTS" \
        | awk -F '##' '{printf "%-14s %20s %s: %s (%s %s) %s ::%s\n",$3,$6,$1,$2,$4,$5,$7,$8}' | grep -E "$PATTERN|$")
    get_item_from_list
    echo
    __ip=$(echo $item | cut -d' ' -f1)
    if [ "$__ip" == "null" ]; then
        __ip=$(echo $item | cut -d' ' -f2) # host id
    fi
    HOSTS=$(echo "$HOSTS" | grep -E "\b${__ip}\b")
fi

HOSTTODOCOUNT=`echo "$HOSTS" | wc -l | awk '{print $1}'`
HOSTSEQNUM=0

process_host() {
    verbose $1 "--------------------------------------------------------------------------------"
    verbose $1 "$(echo $h \
        | awk -F '##' -v HSN=$HOSTSEQNUM -v HTDC=$HOSTTODOCOUNT \
            '{printf "(%02d/%d) %-14s %20s %s: %s (%s %s) %s ::%s\n",HSN,HTDC,$3,$6,$1,$2,$4,$5,$7,$8}' \
        | grep --color=always -E "$PATTERN")"
    local state=`echo $h | awk -F '##' '{print $4}'`
    if [ "$state" != "running" ]; then
        verbose '1;31' "Host is not running"
        return
    fi
    local platform=`echo $h | awk -F '##' '{print $5}'`
    if [ "$platform" != "-" ]; then
        verbose '1;31' "Host is running on an unknown platform ($platform)"
        return
    fi

    if [ "x$USE_HOST_ID" == "x1" ]; then
        ip=$(echo $h | awk -F '##' '{print $6}')$USE_HOST_ID_SUF
    fi

    env=`echo $h | awk -F '##' '{print $1}'`
    name=`echo $h | awk -F '##' '{print $2}'`
    otherip=`echo $h | awk -F '##' '{print $7}'`
    tags=$(echo $h | awk -F '##' '{print $8}')
    ssh_user=$SSH_USR
    if echo "$tags" | grep -q 'ansible_ssh_user' ; then
        custom_ssh_user=$(echo "$tags" | sed -E 's/^.*ansible_ssh_user=([^, ]*).*$/\1/')
        ssh_user=$custom_ssh_user
    fi
    if [ -n "$ssh_user" ]; then
        ssh_dest="${ssh_user}@${ip}"
    else
        ssh_dest=$ip
    fi
    #if [ "x$otherip" != "x" ]; then
    #    ip=$otherip
    #    otherip=`echo $h | awk -F '##' '{print $3}'`
    #fi

    USE_PROXY=$PROXY_USE_BY_DEFAULT
    while [ true ]; do
        local identity=
        if [ -n "$SSH_IDENTITY" ]; then
            identity=" -i '$SSH_IDENTITY'"
        fi
        pdk=
        if [ -n "$PROXY_IDENTITY" ]; then
            pdk=-i
        fi
        ssh_cmd="ssh -p $SSH_PORT $identity -o StrictHostKeyChecking=no -o ConnectTimeout=$CONNECT_TIMEOUT -qo PasswordAuthentication=no $ssh_dest"
        if [ $SSH -eq 1 ]; then
            if [ $USE_PROXY -eq 0 ] || [ "x$PROXY_HOST" = "x$ssh_dest" ]; then
                if [ -n "$JUST_SHOW_SSH" ]; then
                    echo "$ssh_cmd"
                    exit 0
                fi
                echo "$ssh_cmd"
                eval $ssh_cmd 2>&1
            else
                if [ -n "$JUST_SHOW_SSH" ]; then
                    echo "ssh -qA -tt -p $PROXY_PORT $pdk $PROXY_IDENTITY $PROXY_HOST $ssh_cmd"
                    exit 0
                fi
                echo "ssh -A -tt -p $PROXY_PORT $pdk $PROXY_IDENTITY $PROXY_HOST $ssh_cmd"
                ssh -qA -tt -p $PROXY_PORT $pdk $PROXY_IDENTITY $PROXY_HOST $ssh_cmd
            fi
            RES=$?
        elif [ -n "$REMOTE_CMD" ]; then
            if [ $USE_PROXY -eq 0 ]; then
                cat $REMOTE_CMD | eval "$ssh_cmd 2>&1 'cat > ./remote_cmd && chmod u+x ./remote_cmd && ./remote_cmd ; RES=$?; rm ./remote_cmd; exit $RES'"
            else
                cat $REMOTE_CMD | ssh -qA -p $PROXY_PORT $pdk $PROXY_IDENTITY $PROXY_HOST 2>&1 \
                    "cat | $ssh_cmd 'cat > ./remote_cmd && chmod u+x ./remote_cmd && ./remote_cmd ; RES=\$?; rm ./remote_cmd ; exit \$RES'"
            fi
            RES=$?
        else
            break
        fi
        if [ $RES -eq 0 ]; then break; fi

        #verbose $1 "ERROR: $RES"
        if [ $RES -eq 255 ] && [ $USE_PROXY -eq 0 ]; then # 255 is code of no direct ssh
            if [ -n "$PROXY_HOST" ] && [ "x$PROXY_HOST" != "x$ssh_dest" ]; then
                verbose $1 "Using proxy ..."
                USE_PROXY=1
                continue
            fi
            verbose '1;31' No direct connection to host
        else
            USE_PROXY=0
        fi
        if [ "x$otherip" != "x" ]; then
            ip=`echo "$otherip" | awk -F ',' '{print $1}'`
            otherip=`echo "$otherip" | sed -E 's/^[^,]*,*(.*)$/\1/'`
            verbose $1 "Using other ip $ip ..."
            continue
        fi

        if [ "x$YES" = "x1" ]; then
            break
        fi
        verbose "Continue? [y/N]"
        read y
        if [ "x$y" != "xy" ]; then
            verbose '1;31' "ABORTED"
            exit 1
        fi
        break
    done
}

on_preExit() {
    echo
    #echo 'Exiting...' # Runs just before actual exit,
                       # shell will execute EXIT(0) after finishing this function
                       # that we hook also in on_exit function
    exit 2
}

if [ ! -z "$DEBUG" ]; then
    LOGDIR="/tmp/$ME.logs"
    rm -rf "$LOGDIR"
    mkdir -p "$LOGDIR"
else
    LOGDIR=`mktemp -d /tmp/$ME.XXXXXXXX`
    trap on_preExit 1 2 3 6 14 15 30 # HUP INT QUIT TERM STOP PWR  # 1 2 3 15 30
    trap "rm -rf '$LOGDIR'; kill 0; echo" 0 # EXIT
fi

old_IFS=$IFS      # save the field separator
IFS='
'
RUNINPAR=0 WAITFOR=
for h in $HOSTS; do
    HOSTSEQNUM=`echo "$HOSTSEQNUM + 1" | bc`
    ip=`echo $h | awk -F '##' '{print $3}'`
    LF=`printf "$LOGDIR/%02d-$ip" $HOSTSEQNUM`
    touch "$LF"

    if [ $RUN_IN_PARALLEL -ne 1 ]; then
        exec 4>&1
        status=`{ { process_host 2>&1; printf $? 1>&3; } | tee "$LF" 1>&4; } 3>&1`
        exec 4>&-
        if [ "x$status" != "x0" ]; then break; fi
        #process_host 2>&1 | tee -a "$LF"
        #if [ ${PIPESTATUS[0]} -ne 0 ]; then break; fi
        continue
    fi

    printf " $ip" > /dev/stderr
    process_host "$LF" 2>&1 >> "$LF" &
    WAITFOR="$WAITFOR $!"
    RUNINPAR=`echo "$RUNINPAR + 1" | bc`
    if [ $RUNINPAR -ge 120 ]; then
        echo
        verbose "Waiting ..."
        wait $WAITFOR
        RUNINPAR=0 WAITFOR=
    fi
done
IFS=$old_IFS

if [ $RUN_IN_PARALLEL -eq 1 ]; then
    echo
    verbose "Waiting for ssh requests ..."
    wait $WAITFOR
fi

if [ "x$SHOW_SUMMARY" != "x1" ]; then
    if [ $RUN_IN_PARALLEL -eq 1 ]; then
        cd "$LOGDIR"
        for F in `ls -tr`; do
            cat "$F"
        done
    fi

    verbose "DONE"
    exit 0
fi

SUMMARY=`cat $LOGDIR/* | grep -v "$VERBOSE_PREFIX" | sed 's///g' | sort | uniq -c | sort -n`

if [ $RUN_IN_PARALLEL -eq 1 ]; then
    old_IFS=$IFS      # save the field separator
    cd "$LOGDIR"
    list=`ls`
    files=`grep -l " windows)" *`
    for F in $files; do
        list=`echo "$list" | grep -v $F`
        cat "$F"
    done
    verbose "Summarising `echo "$SUMMARY" | wc -l` lines ..."
    IFS='
'
    printf '.'
    SHOWORDER= L=0
    for S in $SUMMARY; do
        L=`echo "$L + 1" | bc`
        S=`echo "$S" | sed -E 's/^ *[0-9]* *(.*)$/\1/' | sed -e 's_\[_\\\\[_g'`
        files=`grep -lE -- "$S" * | sort -r`
        for F in $files; do
            echo "$list" | grep -q "$F"
            if [ $? -ne 0 ]; then continue ; fi

            list=`echo "$list" | grep -v $F`
            SHOWORDER="$F $SHOWORDER"
        done
        SHOWORDER="\n$SHOWORDER"
        if [ "x`echo "$L % 10" | bc`" = "x0" ]; then
            if [ "x`echo "$L % 100" | bc`" = "x0" ]; then
                printf $L
            else
                printf '.'
            fi
        fi
    done
    echo $L
    echo
    SHOWORDER=`echo "$SHOWORDER"`
    IFS=$old_IFS
    for S in $SHOWORDER; do
        cat $S
    done
    for F in $list; do
        cat "$F"
    done
fi

if [ "x$SHOW_SUMMARY" = "x1" ]; then
    SUMMARY=`echo "$SUMMARY" | sort -rn`
    echo
    printf -- "------ SUMMARY of %3d hosts -------------\n" $HOSTTODOCOUNT
    echo "$SUMMARY"
    echo     "------ SUMMARY END ----------------------"
fi
