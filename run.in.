#!/bin/bash

USE_HOSTS_LIST_CACHE=1
RUN_IN_PARALLEL=0
SHOW_SUMMARY=0
SYNCENV=0
SSH=0
PROXY_USE_BY_DEFAULT=0
while true; do
    case "$1" in
        -y) YES=1
            ;;
        -d) DEBUG=1
            ;;
        -g) PATTERN=$2
            shift
            ;;
        -w) PATTERN='\b'$2'\b'
            shift
            ;;
        -s) SSH=1
            ;;
        -r) SYNCENV=`echo "$SYNCENV + 1" | bc`
            ;;
        -ss|-sum) SHOW_SUMMARY=1 YES=1
            ;;
        -nc|-nocache) USE_HOSTS_LIST_CACHE=0
            ;;
        -p|-par) RUN_IN_PARALLEL=1 YES=1
            ;;
        -ps) RUN_IN_PARALLEL=1 YES=1 SHOW_SUMMARY=1
            ;;
        *) break
            ;;
    esac
    shift
done

ME=`basename $0`
HOSTS_LIST_CACHE="/tmp/$ME.cache"
VERBOSE_PREFIX='===>'

verbose() {
    local color='1;33'
    if echo "$1" | grep -q '^[01];[0-9]*$'; then
        color=$1
        shift
    fi
    if [ -e "$1" ]; then
        TO="$1"
        shift
    else
        TO=/dev/stderr
    fi
    echo -e "\e[${color}m$VERBOSE_PREFIX $@\e[0;0m" >> "$TO"
}

if [ $SSH -eq 1 ] && ( [ $RUN_IN_PARALLEL -eq 1 ] || [ $SHOW_SUMMARY -eq 1 ] ); then
    verbose "Could not ssh with RUN_IN_PARALLEL or SHOW_SUMMARY!!!!"
    exit 1
fi

PROFILE=`echo "$ME" | sed -E 's/run.in.((.*).sh*)*$/\2/'`
if [ -z "$PROFILE" ]; then
    PROFILE=default
fi
verbose "Using profile '$PROFILE'"

do_config() {
    local conf=$(dirname $(realpath "$0"))/run.in.cfg
    if [ -e "$conf" ]; then
        verbose "Loading $conf ..."
        source "$conf"
    fi
    while [ -n "$1" ]; do
        conf=${conf}.${1}
        shift
        if [ -e "$conf" ]; then
            verbose "Loading $conf ..."
            source "$conf"
        fi
    done
    if [ -n "$SSH_USR" ]; then
        SSH_USR="${SSH_USR}@"
    fi
    SSH_PORT=${SSH_PORT:-"909"}
    PROXY_PORT=${PROXY_PORT:-"$SSH_PORT"}
    if [ -z "$PROXY_HOST" ]; then
        PROXY_USE_BY_DEFAULT=0
    fi
}
do_config $PROFILE
CONNECT_TIMEOUT=${CONNECT_TIMEOUT:-2}

if [ ! -e "$HOSTS_LIST_CACHE" ] || [ $USE_HOSTS_LIST_CACHE -ne 1 ]; then
    verbose "Loading host list"
    if [ "x$CLOUD_TYPE" = "xmaestro" ]; then
        HOSTS=$(or2-describe-instances -p "$MAESTRO_PROJECT" -r "$MAESTRO_REGION" --json --full)
    else
        HOSTS=$(aws --output json --profile $PROFILE ec2 describe-instances \
            --query 'Reservations[*].Instances[*].{nif:NetworkInterfaces[*].PrivateIpAddresses[*].{public:Association.PublicIp,private:PrivateIpAddress},tags:Tags,state:State.Name,platform:Platform,id:InstanceId}')
            #--instance-ids i-0f98c3e67f0f50bde \
    fi
else
    verbose "Cached host list is using: [details: $(ls -l "$HOSTS_LIST_CACHE")]"
    HOSTS=`cat "$HOSTS_LIST_CACHE"`
fi
if [ $? -ne 0 ]; then
    exit 1
fi
echo "$HOSTS" > "$HOSTS_LIST_CACHE"

HOSTS=$(echo "$HOSTS" | jq -rc 'to_entries | .[] | @sh "[\(.key)]=\(.value | tostring)"')
eval "declare -A HOSTS=($HOSTS)"

parse_aws() {
    local host=$(echo "$1" | jq -rc '.[] | to_entries | .[] | @sh "[\(.key)]=\(.value | tostring)"')
    eval "declare -A host=($host)"
    local nif=${host[nif]}
    nif=$(echo "$nif" | jq -rc '[.[][] | to_entries[]] | reduce .[] as $d (null; .[$d.key] += [$d.value])')
    nif=$(echo "$nif" | jq -rc '(.public | tostring)+ "," + (.private | tostring) + ","' | tr -d '[]"' | sed -E 's/(null,|,+$)//g')
    host[ip]=$(echo $nif | sed -E 's/^([^,$]*).*$/\1/g')
    nif=$(echo $nif | sed -E -e 's/^([^,$]*)(.*)$/\2/g' -e 's/^,//')
    local tags=${host[tags]}
    tags=$(echo "$tags" | jq -rc '[.[] | .["key"] = .Key | .["value"] = .Value] | from_entries')
    local names=$(echo "$tags" | jq -rc 'to_entries | .[] | @sh "[\(.key)]=\(.value | tostring)"')
    tags=$(echo "$tags" \
        | jq -rc '[to_entries[] | .["v"] = .key + "=" + (.value | tostring)] | reduce .[] as $d (null; .["xxx"] += [$d.v]) | .xxx' \
        | tr -d '[]"'
    )
    host[tags]=$tags
    eval "declare -A names=($names)"
    host[name]=${names[Name]:-"???"}
    host[env]=${names[Environment]:-"???"}
    if [ "x${host[platform]}" = "xnull" ]; then
        host[platform]="-"
    fi
    printf "%s##%s##%s##%s##%s##%s##%s##%s\n" ${host[env]} ${host[name]} ${host[ip]} ${host[state]} ${host[platform]} ${host[id]} ${nif} ${host[tags]}
}

parse_maestro() {
    local host=$(echo "$1" | jq -rc 'to_entries | .[] | @sh "[\(.key)]=\(.value | tostring)"')
    eval "declare -A host=($host)"
    # {"memory":"15360","privateIp":"10.24.21.14","dnsName":"example.com","description":"super jet","project":"SUPER-PRJ","networks":"fe772f49-8ad9-4b32-addf-ce47446b5038","instanceId":"fkrdr5ter345","vlan":"Server Network","schedules":"ua_db_start,ua_stop","isWindows":"false","state":"running","sshKeySet":"false","locked":"false","owner":"Maestro","image":"Linux8_64-bit","shape":"3XL.40","cpu":"8","tags":"cron:start=ua-db, cron:stop=ua","guestOS":"Linux 8 64-bit","requested":"2022-03-02T05:01:57+00:00","region":"PRG-US7","isExposed":"false","registerOnLuminate":"false","properties":"description=foo","buildImageDate":"01/06/2022"}
    local nif=${host[publicIp]:-"null"},${host[privateIp]:-"null"}
    nif=$(echo "$nif" | sed -E 's/(null,|,+$)//g')
    host[ip]=$(echo $nif | sed -E 's/^([^,$]*).*$/\1/g')
    nif=$(echo $nif | sed -E 's/^([^,$]*)(.*)$/\2/g')
    local desc=${host[description]:-"???"}
    host[env]="???"
    if echo "$desc" | grep -q '^env:' ; then
        host[env]=$(echo "$desc" | sed -E 's/^env:([^ ]*) .*/\1/')
        desc=$(echo "$desc" | sed -E 's/^env:[^ ]* (.*)/\1/')
    fi
    host[name]=$desc
    host[platform]=$([ ${host[isWindows]:-"???"} = "false" ] && echo "-" || echo "windows")
    host[id]=${host[instanceId]:-"???"}
    #local owner=${host[owner]}
    #host[tags]="${host[tags]}, owner: $owner"
    printf "%s##%s##%s##%s##%s##%s##%s##%s\n" "${host[env]}" "${host[name]}" "${host[ip]}" "${host[state]}" "${host[platform]}" "${host[id]}" "${nif}" "${host[tags]}"
}

ask() {
    local opt=
    if [ "$1" = 'noecho' ]; then
        opt='-s'
        shift
    fi
    local esc=$(printf '\033')
    white="${esc}[1;37m"
    printf "${white}===> $@${esc}[0m "
    res=
    read $opt res
    if [ -n "$opt" ]; then
        echo
    fi
}

get_item_from_list() {
    echo "$list" | awk '{print NR") "$0}'
    size=$(expr `echo "$list" | wc -l` + 0)
    if [ $size -eq 0 ]; then
        alert "ERROR: Could not extract list from mirrros list"
        exit 1
    fi
    if [ $size -eq 1 ]; then
        item=$(echo "$list" | sed -n 1p)
        return
    fi

    local num= suggest_num=
    if [ -n "$1" ]; then
        suggest_num=`echo "$list" | grep -n "$1" | head -n 1 | cut -f1 -d:`
    fi
    if [ -z "$suggest_num" ]; then suggest_num=1 ; fi
    while true; do
        ask "Enter the number from list ($suggest_num): "
        num=$res
        if [ -z "$num" ]; then num=$suggest_num; fi

        set +e
        echo "$num" | grep -q '^[0-9][0-9]*$'
        res=$?
        set -e
        if [ $res -ne 0 ]; then continue; fi
        if [ $num -gt $size ]; then continue; fi
        break
    done
    item=$(echo "$list" | sed -n ${num}p)
}

HOSTS=$(
for host in "${HOSTS[@]}"; do
    if [ "x$CLOUD_TYPE" = "xmaestro" ]; then
        parse_maestro "$host"
    else
        parse_aws "$host"
    fi
done)

if [ -n "$PATTERN" ]; then
    if echo "$PATTERN" | grep -q -E '^([0-9]{1,3}\.){3}[0-9]{1,3}$' ; then
        PATTERN="\b${PATTERN}\b"
    fi
    HOSTS=$(echo "$HOSTS" | grep -E "$PATTERN")
    if [ -z "$HOSTS" ]; then
        PATTERN=$(printf "$PATTERN" | tr -d "\b")
        verbose "There are no hosts that contains \e[1;31m$PATTERN\e[1;33m in its description"
        exit 1
    fi
fi

HOSTS=$(echo "$HOSTS" | sort -g)

if [ $SSH -eq 1 ]; then
    REMOTE_CMD=ssh # just to inform on beggining
else
    REMOTE_CMD="$@"
fi

if [ -z "$REMOTE_CMD" ]; then
    USE_HOSTS_LIST_CACHE=0;
else
    verbose ">>>>>> $REMOTE_CMD"
    if [ ! -e "$REMOTE_CMD" ]; then
        echo "$REMOTE_CMD" > /tmp/remote_cmd
        REMOTE_CMD=/tmp/remote_cmd
    fi
fi

if [ -z "$REMOTE_CMD" ] && [ $SYNCENV -eq 0 ]; then
    list=$(echo "$HOSTS" \
        | awk -F '##' '{printf "===> %-14s %20s %s: %s (%s %s) %s ::%s\n",$3,$6,$1,$2,$4,$5,$7,$8}' | grep --color=always -E "$PATTERN|$")
    echo "$list"
    verbose "`echo "$list" | wc -l` hosts found"
    exit 0
fi

res=$(ssh-add -q 2>&1)
if [ $? -ne 0 ]; then
    verbose $res
    verbose "Please run: eval \$(ssh-agent | grep ^SSH)"
fi

HOSTS=`echo "$HOSTS" | grep -v '##windows##'`

if [ $SSH -eq 1 ]; then
    list=$(echo "$HOSTS" \
        | awk -F '##' '{printf "%-14s %20s %s: %s (%s %s) %s ::%s\n",$3,$6,$1,$2,$4,$5,$7,$8}' | grep -E "$PATTERN|$")
    get_item_from_list
    echo
    HOSTS=$(echo "$HOSTS" | grep -E "\b$(echo $item | cut -d' ' -f1)\b")
fi

HOSTTODOCOUNT=`echo "$HOSTS" | wc -l | awk '{print $1}'`
HOSTSEQNUM=0

add_key() {
    cat ~/.ssh/id_rsa.pub | ssh $host 'if [ ! -d .ssh ]; then mkdir .ssh; fi ; cat > ~/.ssh/authorized_keys'
}

process_host() {
    verbose $1 "--------------------------------------------------------------------------------"
    verbose $1 "$(echo $h \
        | awk -F '##' -v HSN=$HOSTSEQNUM -v HTDC=$HOSTTODOCOUNT \
            '{printf "(%02d/%d) %-14s %20s %s: %s (%s %s) %s ::%s\n",HSN,HTDC,$3,$6,$1,$2,$4,$5,$7,$8}' \
        | grep --color=always -E "$PATTERN")"
    local state=`echo $h | awk -F '##' '{print $4}'`
    if [ "$state" != "running" ]; then return; fi
    local platform=`echo $h | awk -F '##' '{print $5}'`
    if [ "$platform" != "-" ]; then return; fi

    env=`echo $h | awk -F '##' '{print $1}'`
    name=`echo $h | awk -F '##' '{print $2}'`
    otherip=`echo $h | awk -F '##' '{print $7}'`
    #if [ "x$otherip" != "x" ]; then
    #    ip=$otherip
    #    otherip=`echo $h | awk -F '##' '{print $3}'`
    #fi

    USEPROXY=$PROXY_USE_BY_DEFAULT
    while [ true ]; do
        #if [ $SYNCENV -gt 0 ] && [ $USEPROXY -eq 0 ]; then # always use proxy
        #    verbose $1 "Synchronizing there ..."
        #    cd ~/bin
        #    rsync -a -e "ssh -A $PROXY_HOST ssh -o StrictHostKeyChecking=no -o ConnectTimeout=2" .bashrc .bash_profile .bash_completion vim/.vimrc $SSH_USR$ip:
        #    rsync -a -e "ssh -A $PROXY_HOST ssh -o StrictHostKeyChecking=no -o ConnectTimeout=2" ~/.bash_aws_history $SSH_USR$ip:.bash_history
        #    cd - > /dev/null
        #fi
        ssh_cmd="ssh -p $SSH_PORT -o StrictHostKeyChecking=no -o ConnectTimeout=$CONNECT_TIMEOUT -qo PasswordAuthentication=no $SSH_USR$ip"
        if [ $SSH -eq 1 ]; then
            if [ $USEPROXY -eq 0 ] || [ "x$PROXY_HOST" = "x$SSH_USR$ip" ]; then
                eval $ssh_cmd 2>&1
            else
                ssh -qA -tt -p $PROXY_PORT $PROXY_HOST $ssh_cmd
            fi
            RES=$?
            if [ $RES -eq 0 ] && [ $SYNCENV -gt 1 ]; then
                verbose $1 "Synchronizing here ..."
                rsync -a -e "ssh -A -p $PROXY_PORT $PROXY_HOST ssh -o StrictHostKeyChecking=no" $SSH_USR$ip:.bash_history ~/.bash_aws_history
            fi
        elif [ -n "$REMOTE_CMD" ]; then
            if [ $USEPROXY -eq 0 ]; then
                cat $REMOTE_CMD | eval "$ssh_cmd 2>&1 'cat > ./remote_cmd && chmod u+x ./remote_cmd && ./remote_cmd ; RES=$?; rm ./remote_cmd; exit $RES'"
            else
                cat $REMOTE_CMD | ssh -qA -p $PROXY_PORT $PROXY_HOST 2>&1 \
                    "cat | $ssh_cmd 'cat > ./remote_cmd && chmod u+x ./remote_cmd && ./remote_cmd ; RES=\$?; rm ./remote_cmd ; exit \$RES'"
            fi
            RES=$?
        else
            break
        fi
        if [ $RES -eq 0 ]; then break; fi

        #verbose $1 "ERROR: $RES"
        if [ $RES -eq 255 ] && [ $USEPROXY -eq 0 ]; then # 255 is code of no direct ssh
            if [ -n "$PROXY_HOST" ] && [ "x$PROXY_HOST" != "x$SSH_USR$ip"]; then
                verbose $1 "Using proxy ..."
                USEPROXY=1
                continue
            fi
            verbose '1;31' No direct connection to host
        else
            USEPROXY=0
        fi
        if [ "x$otherip" != "x" ]; then
            ip=`echo "$otherip" | awk -F ',' '{print $1}'`
            otherip=`echo "$otherip" | sed -E 's/^[^,]*,*(.*)$/\1/'`
            verbose $1 "Using other ip $ip ..."
            continue
        fi

        if [ "x$YES" = "x1" ]; then
            break
        fi
        verbose "Continue? [y/N]"
        read y
        if [ "x$y" != "xy" ]; then
            verbose '1;31' "ABORTED"
            exit 1
        fi
        break
        #if [ $? -ne 0 ]; then
        #    add_key
        #    ssh $ip $REMOTE_CMD
    done
}

on_preExit() {
    echo
    #echo 'Exiting...' # Runs just before actual exit,
                       # shell will execute EXIT(0) after finishing this function
                       # that we hook also in on_exit function
    exit 2
}

if [ ! -z "$DEBUG" ]; then
    LOGDIR="/tmp/$ME.logs"
    rm -rf "$LOGDIR"
    mkdir -p "$LOGDIR"
else
    LOGDIR=`mktemp -d /tmp/$ME.XXXXXXXX`
    trap on_preExit 1 2 3 6 14 15 30 # HUP INT QUIT TERM STOP PWR  # 1 2 3 15 30
    trap "rm -rf '$LOGDIR'; kill 0; echo" 0 # EXIT
fi

old_IFS=$IFS      # save the field separator
IFS='
'
RUNINPAR=0 WAITFOR=
for h in $HOSTS; do
    HOSTSEQNUM=`echo "$HOSTSEQNUM + 1" | bc`
    ip=`echo $h | awk -F '##' '{print $3}'`
    LF=`printf "$LOGDIR/%02d-$ip" $HOSTSEQNUM`
    touch "$LF"

    if [ $RUN_IN_PARALLEL -ne 1 ]; then
        exec 4>&1
        status=`{ { process_host 2>&1; printf $? 1>&3; } | tee "$LF" 1>&4; } 3>&1`
        exec 4>&-
        if [ "x$status" != "x0" ]; then break; fi
        #process_host 2>&1 | tee -a "$LF"
        #if [ ${PIPESTATUS[0]} -ne 0 ]; then break; fi
        continue
    fi

    printf " $ip" > /dev/stderr
    process_host "$LF" 2>&1 >> "$LF" &
    WAITFOR="$WAITFOR $!"
    RUNINPAR=`echo "$RUNINPAR + 1" | bc`
    if [ $RUNINPAR -ge 120 ]; then
        echo
        verbose "Waiting ..."
        wait $WAITFOR
        RUNINPAR=0 WAITFOR=
    fi
done
IFS=$old_IFS

if [ $RUN_IN_PARALLEL -eq 1 ]; then
    echo
    verbose "Waiting for ssh requests ..."
    wait $WAITFOR
fi

if [ "x$SHOW_SUMMARY" != "x1" ]; then
    if [ $RUN_IN_PARALLEL -eq 1 ]; then
        cd "$LOGDIR"
        for F in `ls -tr`; do
            cat "$F"
        done
    fi

    verbose "DONE"
    exit 0
fi

SUMMARY=`cat $LOGDIR/* | grep -v "$VERBOSE_PREFIX" | sed 's///g' | sort | uniq -c | sort -n`

if [ $RUN_IN_PARALLEL -eq 1 ]; then
    old_IFS=$IFS      # save the field separator
    cd "$LOGDIR"
    list=`ls`
    files=`grep -l " windows)" *`
    for F in $files; do
        list=`echo "$list" | grep -v $F`
        cat "$F"
    done
    verbose "Summarising `echo "$SUMMARY" | wc -l` lines ..."
    IFS='
'
    printf '.'
    SHOWORDER= L=0
    for S in $SUMMARY; do
        L=`echo "$L + 1" | bc`
        S=`echo "$S" | sed -E 's/^ *[0-9]* *(.*)$/\1/' | sed -e 's_\[_\\\\[_g'`
        files=`grep -lE -- "$S" * | sort -r`
        for F in $files; do
            echo "$list" | grep -q "$F"
            if [ $? -ne 0 ]; then continue ; fi

            list=`echo "$list" | grep -v $F`
            SHOWORDER="$F $SHOWORDER"
        done
        SHOWORDER="\n$SHOWORDER"
        if [ "x`echo "$L % 10" | bc`" = "x0" ]; then
            if [ "x`echo "$L % 100" | bc`" = "x0" ]; then
                printf $L
            else
                printf '.'
            fi
        fi
    done
    echo $L
    echo
    SHOWORDER=`echo "$SHOWORDER"`
    IFS=$old_IFS
    for S in $SHOWORDER; do
        cat $S
    done
    for F in $list; do
        cat "$F"
    done
fi

if [ "x$SHOW_SUMMARY" = "x1" ]; then
    SUMMARY=`echo "$SUMMARY" | sort -rn`
    echo
    printf -- "------ SUMMARY of %3d hosts -------------\n" $HOSTTODOCOUNT
    echo "$SUMMARY"
    echo     "------ SUMMARY END ----------------------"
fi
