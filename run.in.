#!/bin/sh

while true; do
    case "x$1" in
        "x-y") YES=1
            ;;
        "x-g") PATTERN=$2
            shift
            ;;
        "x-s") SSH=1
            shift
            ;;
        *) break
            ;;
    esac
    shift
done

msg() {
    echo "\033[0;35m$@\033[0;0m" >&2
}
if [ ! -z "$SSH" ]; then
    REMOTE_CMD=ssh
else
    REMOTE_CMD="$@"
fi
msg ">>>>>> $REMOTE_CMD"

PROFILE=`basename $0 | sed -E 's/run.in.(.*).sh/\1/'`

HOSTS=`aws --output text --profile $PROFILE --region eu-west-1 ec2 describe-instances \
    --query 'Reservations[*].Instances[*].[PrivateIpAddress,NetworkInterfaces[*].PrivateIpAddresses,Tags,State.Name,Platform,InstanceId]'`
    #--instance-ids i-0f98c3e67f0f50bde \
if [ $? -ne 0 ]; then
    exit 1
fi
HOSTS=`echo "$HOSTS" | grep -E '^(Env|Name|True\s*|10\.10|None)'`
HOSTS=`echo "$HOSTS" | awk '{
        split($0,a," ");
        if ( a[1] == "Name" ) { host[0] = a[2] ? a[2] : "empty" }
        else if ( a[1] == "Environment" ) { host[1] = a[2] ? a[2] : "empty" }
        else if ( a[1] == "True" ) {
            if ( a[3] != host["ip"] ) host[2] = host[2]","a[3]
        }
        else {
            if ( host["ip"] ) {
                printf "%s##%s##%s##%s##%s##%s##%s\n",host[1],host[0],host["ip"],host["state"],host["Platform"],host["aid"],host[2]
                delete host
            }
            host[0] = "?"; host[1] = "?"
            if ( a[5] != "" ) {
                delete a[1]
                n = ""
                for (i in a) {
                    n = n " " a[i]
                }
                split(n,a," ")
            }
            host["ip"] = a[1]
            host["state"] = a[2]
            if ( a[3] == "None" ) a[3] = "-"
            host["Platform"] = a[3]
            host["aid"] = a[4]
        }
    } END {
        printf "%s##%s##%s##%s##%s##%s##%s\n",host[1],host[0],host["ip"],host["state"],host["Platform"],host["aid"],host[2]
    }' | sort -g`
HOSTS=`echo "$HOSTS" | sed 's/##,/##/g'`
#echo "$HOSTS=="
if [ ! -z "$PATTERN" ]; then
    HOSTS=`echo "$HOSTS" | grep -E "$PATTERN"`
    if [ "x$HOSTS" = "x" ]; then
        msg "There are no hosts that contains '$PATTERN' in its description"
        exit 1
    fi
fi

if [ -z "$2" ] && [ "x$REMOTE_CMD" = "x" ]; then
    echo "$HOSTS" | sed 's/##/ /g' | sort -k 1 | awk -F ' ' '{printf "===> %-15s %20s %s: %s (%s %s) %s\n",$3,$6,$1,$2,$4,$5,$7}' | grep --color=auto -E "$PATTERN"
    exit 0
fi

add_key() {
    cat ~/.ssh/id_rsa.pub | ssh $host 'if [ ! -d .ssh ]; then mkdir .ssh; fi ; cat > ~/.ssh/authorized_keys'
}

for h in $HOSTS; do
    msg "--------------------------------------------------------------------------------"
    msg `echo $h | sed 's/##/ /g' | awk -F ' ' '{printf "===> %-15s %20s %s: %s (%s %s) %s\n",$3,$6,$1,$2,$4,$5,$7}' | grep --color=always -E "$PATTERN"`
    state=`echo $h | awk -F '##' '{print $4}'`
    if [ "$state" != "running" ]; then continue; fi
    platform=`echo $h | awk -F '##' '{print $5}'`
    if [ "$platform" != "-" ]; then continue; fi

    env=`echo $h | awk -F '##' '{print $1}'`
    name=`echo $h | awk -F '##' '{print $2}'`
    ip=`echo $h | awk -F '##' '{print $3}'`
    otherip=`echo $h | awk -F '##' '{print $7}'`
    msg " $otherip"

    while [ true ]; do
        if [ ! -z "$SSH" ]; then
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=2 $ip
        else
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=2 $ip -qo PasswordAuthentication=no $REMOTE_CMD
        fi
        RES=$?
        if [ $RES -eq  0 ]; then break; fi

        msg "EROROR: $RES"
        if [ "x$otherip" != "x" ]; then
            ip=`echo "$otherip" | awk -F ',' '{print $1}'`
            otherip=`echo "$otherip" | sed -E 's/^[^,]*,*(.*)$/\1/'`
            msg "===> Using other ip $ip ..."
            continue
        fi

        if [ "$YES" = "1" ]; then
            break
        fi
        msg "Continue? [y/N]"
        read y
        if [ "x$y" != "xy" ]; then
            msg "ABORTED"
            exit 1
        else
            break
        fi
        #if [ $? -ne 0 ]; then
        #    add_key
        #    ssh $ip $REMOTE_CMD
    done
done

msg "DONE"
